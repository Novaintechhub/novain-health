
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // --- File Path Rules ---

    // User Profile Pictures: /user_profiles/{userId}/profile.jpg
    // Allow users to read any profile picture (for doctor listings).
    // Allow users to write ONLY to their own profile picture path.
    match /user_profiles/{userId}/{fileName} {
      allow read: if true;
      allow write: if isSignedIn() && isOwner(userId);
    }

    // Medical Records: /medical_records/{patientId}/{recordId}/{fileName}
    // Allow users to upload and view their own medical records.
    // Allow doctors to view records of patients they have appointments with.
    // Important: Firestore rules should be the primary mechanism for granting doctors access to the *list* of files.
    // Storage rules just protect the files themselves from direct unauthorized access.
    match /medical_records/{patientId}/{recordId}/{fileName} {
        allow read, write: if isSignedIn() && isOwner(patientId);
        // Add doctor access rule if needed, though typically access is granted via signed URLs generated by a backend.
    }
    
    // Clinic Images: /clinic_images/{doctorId}/{fileName}
    // Allow anyone to read clinic images.
    // Allow only the doctor to upload images for their own clinic.
    match /clinic_images/{doctorId}/{fileName} {
      allow read: if true;
      allow write: if isSignedIn() && isOwner(doctorId);
    }
    
    // Default Deny: Disallow any other read/write operations on any other paths.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
